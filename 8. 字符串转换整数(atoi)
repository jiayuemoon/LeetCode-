class Solution {
public:
    int myAtoi(string str) {
        if(str=="")
            return 0;
        
        //记录有效的第一个字符
        int flag=-1;
        //处理2种特殊情况并记录有效情况下第一个字符位置
        for(int i=0;i<str.size();i++){
            if(str[i]!=' '){
                if(str[i]=='+'||str[i]=='-'||str[i]>='0'&&str[i]<='9'){
                    flag=i;
                    break;
                }
                else{
                    break;
                }
            }
        }
        //仅含空白字符或者第一个非空格字符不是一个有效整数，不需要转换
        if(flag==-1)
            return 0;
        int flag2=-1;
        str+=" ";//方便不用对边界情况额外处理
        for(int i=flag+1;i<str.size();i++){
            if(str[i]>='0'&&str[i]<='9'){
                continue;
            }
            else{
                flag2=i-1;
                break;
            }
        }
        string temp;
        //删除前面的多个空格以及后面多个无用的字符
        for(int i=flag;i<=flag2;i++){

            //单个char转string
            string s;
            
            stringstream stream;//中间借助者

            stream << str[i];

            s = stream.str();
            
            temp+=s;
        }
        str=temp;
        cout<<str<<endl;
        
        flag=0;//初始化认为数字无正负号
        if(str[0]=='+'){
            flag=1;
        }
        else if(str[0]=='-'){
            flag=-1;
        }
        //正常处理
        reverse(str.begin(),str.end());
        cout<<str<<endl;
        int sum=0;
        
        for(int i=0;i<str.size();i++){
            if(str[i]!='+'&&str[i]!='-'){
                int t=str[i]-'0';
                sum+=t*pow(10,i);
                cout<<sum<<endl;
                if(sum<t*pow(10,i)){
                    if(flag==1||flag==0)
                        return INT_MAX;
                    else if(flag==-1)
                        return INT_MIN;
                }
            }
            
        }
        if(flag==0||flag==1)
            return sum;
        else
            return -sum;

    }
};
