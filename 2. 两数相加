/**
题目：

给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {
 }
 * };
 */
 
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        //p,q分别作为l1,l2每个节点的指示
        ListNode* p;
        ListNode* q;
        p = l1;
        q = l2;
        //f用于记录新链表方便返回
        ListNode* f=new ListNode(-1);
        //x指向新创建的链表的首节点
        ListNode* x=f;
        //y用于指示x的前一个节点
        ListNode* y;
        //进位标识，初始化为0（没有进位）
        int t=0;
        //将2个链表的节点对齐相加
        //最后处理后续出现的3种情况，某个链表的节点多出来一部分/链表节点刚好对齐
        
        while(p!=NULL && q!=NULL){
            x->val=p->val+q->val+t;
            //产生进位，需要减去10才是该位对应的数；同时t置1为下一位的进位相加做准备
            if(x->val>=10){
                t=1;
                x->val-=10;
            }
            //未产生进位
            else 
                t=0;
            //产生空节点并将其链接到结果链表上;
            //p,q指针后移（即指向待处理的节点），x指针指向新节点，y指向处理好的最后一个节点
            x->next=new ListNode(-1); 
            y=x;
            x=x->next;
            p=p->next;
            q=q->next;
        }
        //l1链表长一些，此时q指向NULL,p指向待处理的结点,x指向新建的节点,y指向x的前一个节点
        if(p!=NULL){
            //不需要向上进一位（直接链接）
            if(t==0){
                y->next=p;
            }
            //需要考虑到不断地进位
            else if(t==1){
                while(p!=NULL){
                    x->val=p->val+t;
                    if(x->val>=10){
                        t=1;
                        x->val-=10;
                    }
                    //只要多余的节点出现一个不需要进位的，则以后都不会出现进位
                    else{
                        t=0;
                        break;
                    }
                    x->next=new ListNode(-1); 
                    y=x;
                    x=x->next;
                    p=p->next;
                }
                if(t==1){
                    x->val=1;
                }
                else if(t==0){
                    x->next=p->next;
                }
            }
        }
        //与p!=NULL同理
        else if(q!=NULL){
            if(t==0){
                y->next=q;
            }
            else if(t==1){
                while(q!=NULL){
                    x->val=q->val+t;
                    if(x->val>=10){
                        t=1;
                        x->val-=10;
                    }
                    else{
                        t=0;
                        break;
                    }
                    x->next=new ListNode(-1);
                    y=x;
                    x=x->next;
                    q=q->next;
                }
                if(t==1){
                    x->val=1;
                }
                else if(t==0){
                    x->next=q->next;
                }
            }
        }
        //2个整数位数相同
        else{
            if(t==1){
                x->val=1;
            }
            else
                y->next=NULL;
        }
        return f;
    }
};
