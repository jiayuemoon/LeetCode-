题目：

给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

说明：
给定的 n 保证是有效的。
进阶：
你能尝试使用一趟扫描实现吗？


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //这里链表的定义没有头节点
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //先用一根指针正着走n步，然后继续走的同时另一根指针也从head开始走最终可以走到倒数n处
        ListNode * p=head;
        ListNode * q=head;
        int i=0;
        //让p指向正数第n个
        //必须加上p->next!=NULL的条件，否则会报指向空指针的错误
        while(i<n){
            p=p->next;
            i++;
        }
        //边界情况，需要删除的是首节点或者只有一个节点需要删除
        if(p==NULL){
             return q->next;
        }
        else{
            //此时q指向倒数第n+1个
            while(p->next!=NULL){
                p=p->next;
                q=q->next;
            }
            //删除
            q->next=q->next->next;
            return head;
        }
        
    }
};
