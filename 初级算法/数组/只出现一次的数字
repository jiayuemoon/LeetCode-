题目：

给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
        //方法1
        
        //最易理解的方法，排序，循环查找，步长为2
        sort(nums.begin(),nums.end());
        if(nums.size()==1)
            return nums[0];
        //解决后边界问题
        if(nums[nums.size()-1]!=nums[nums.size()-2])
            return nums[nums.size()-1];
        
        for(int i=0;i<nums.size()-1;i=i+2){
            if(nums[i]==nums[i+1]){
                continue;
            }
            else{
                return nums[i];
            }
        }
        //程序不会执行这一句，但是如果不加编译会出错
        return 0;
        
        
        //方法2
        
        //异或，相同为0，不同为1
        int result=0;
        for(int i=0;i<nums.size();i++){
            result^=nums[i];
        }
        return result;
    }
};
