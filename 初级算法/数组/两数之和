题目：

给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        /*
        //这是一种错误的解答方法，因为首先对它排序后就改变了数字对应的位置
        vector<int> ans;
        sort(nums.begin(),nums.end());
        int i=0;
        int j=nums.size()-1;
        while(i<j&&nums[i]+nums[j]!=target){
            if(nums[i]+nums[j]<target){
                i++;
            }
            else{
                j--;
            }
        }
        ans.push_back(i);
        ans.push_back(j);
        return ans;
        */
        
        /*
        //方法1
        //最简单的方法
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i]+nums[j]==target){
                    ans.push_back(i);
                    ans.push_back(j);
                    break;
                }
            }
        }
        return ans;
        */
        
        //方法2
        //用map映射处理
        vector<int> ans;
        int temp;
        //数组中每个数字和它位置的对应关系
        map<int, int> m;
        for(int i=0;i<nums.size();i++){
            temp=target-nums[i];
            if(m.find(temp)!=m.end()){
                ans.push_back(m[temp]);
                ans.push_back(i);
                break;
            }
            m[nums[i]]=i;
        }
        return ans;
    }
};
