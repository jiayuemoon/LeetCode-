题目：

请你来实现一个 atoi 函数，使其能将字符串转换成整数。
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
在任何情况下，若函数不能进行有效的转换时，请返回 0。
说明：
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。


class Solution {
public:
    int myAtoi(string str) {
        /*
        //方法1：直接删除字符串中所有空格有可能导致前后有空格的数字连在一起变成一个数字，所以这种方法有缺陷
        //删除字符串中所有的空格
        string s="";
        for(int i=0;i<str.size();i++){
            if(str[i]!=' '){
                s+=str[i];
            }
        }
        //大写转小写
        transform(s.begin(),s.end(),s.begin(),::tolower);
        cout<<s<<endl;
        //字符串为空或者仅包含空白字符或者第一个字符不是整数
        if(s==""||(s[0]!='+'&&s[0]!='-'&&(s[0]>'9'||s[0]<'0')))
            return 0;
        if(s.size()>1&&(s[0]>'9'||s[0]<'0')){
            if(s[1]>'9'||s[1]<'0')
                return 0;
        }
        //查找有效数字的界限
        int flag=1;
        int i;
        if(s[0]=='+'||s[0]=='-')
            i=1;
        else
            i=0;
        if(s[0]=='-')
            flag=-1;
        //temp中保存了不带符号的整数
        string temp="";
        for(;i<s.size();i++){
            if(s[i]>='0'&&s[i]<='9'){
                temp+=s[i];
                cout<<temp<<endl;
            }
            if(i+1<s.size()&&(s[i+1]>'9'||s[i+1]<'0'))
                break;
        }
        int ans=0;
        for(int j=0;j<temp.size();j++){
            ans+=(temp[j]-'0')*pow(10,temp.size()-j-1);
            //发生溢出
            if(ans<0){
                if(flag==-1)
                    return INT_MIN;
                else
                    return INT_MAX;
            }
        }
        return flag*ans;
        */
        
        //方法2
        //这里的i,j，开始指向前后非空格字符的位置，然后指向更新后的字符串（删除了前后空格的字符串）的前部数字部分
        //剔除字符串前后的空格
        //字符串为空
        if(str=="")
            return 0;
        string s="";
        int i=0;
        int j=str.size()-1;
        for(;i<j;){
            if(str[i]!=' '&&str[j]!=' ')
                break;
            if(str[i]==' ')
                i++;
            if(str[j]==' ')
                j--;
        }
        cout<<i<<" "<<j<<endl;
        //字符串为空格串
        if(i>j)
            return 0;
        for(int k=i;k<=j;k++){
            s+=str[k];
        }
        //s是首尾没有空格的字符串
        cout<<s<<endl;
        
        int flag=1;
        if(s[0]=='-')
            flag=-1;
        
        //只有1个字符且不是整数
        if(s.size()==1&&(s[0]>'9'||s[0]<'0'))
            return 0;
        
        cout<<"ok"<<endl;
        
        //考虑至少有2个字符的字符串
        //首字符就是错的
        if((s[0]!='+'&&s[0]!='-')&&(s[0]>'9'||s[0]<'0'))
            return 0;
        
        cout<<"ok"<<endl;
        
        //第二个字符至少为数字
        if((s[0]=='+'||s[0]=='-')&&(s[1]>'9'||s[1]<'0'))
            return 0;
        
        cout<<"ok"<<endl;
        
        
        if(s[0]=='+'||s[0]=='-')
            i=1;
        else
            i=0;
        
        //以上排除特殊情况后对正常情况进行处理
        for(int k=i;k<s.size();k++){
            if(s[k]>'9'||s[k]<'0'){
                j=k-1;
                break;
            }
            else if(k==s.size()-1&&s[k]>='0'&&s[k]<='9'){
                j=k;
                break;
            }
        }
        cout<<j<<endl;
        int sum=0;
        for(int k=i;k<=j;k++){
            sum+=(s[k]-'0')*pow(10,j-k);
            cout<<sum<<endl;
            //超过有符号整数的范围
            if(sum<0){
                if(flag==-1)
                    return INT_MIN;
                else
                    return INT_MAX;
            }
        }
        return flag*sum;
    }
};
